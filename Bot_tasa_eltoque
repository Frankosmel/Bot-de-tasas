import re, json, logging, requests, html, os
from datetime import datetime
import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from apscheduler.schedulers.background import BackgroundScheduler

# ── CONFIG ──────────────────────────────────────────────────────────────────
BOT_TOKEN = "7647499610:AAF56-5dp1OAQUteRyVFMcsp_CTVQcHsXzA"      # ← pon tu token antes de subir
ADMIN_ID  = 7907625643
INTERVALO_MINUTOS = 60

URL = "https://eltoque.com/precio-del-dolar-en-el-mercado-informal-en-cuba-hoy"
PATRON = re.compile(r"1\s+(USD|EUR|MLC|CAD)\s+(\d+(?:[.,]\d+)?)\s+CUP", re.IGNORECASE)

GROUPS_FILE = "groups.json"
if not os.path.exists(GROUPS_FILE):
    with open(GROUPS_FILE, "w") as f:
        json.dump([], f)

# ── BOT ─────────────────────────────────────────────────────────────────────
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="Markdown")

# ── UTILIDADES PARA GRUPOS ─────────────────────────────────────────────────
def cargar_grupos() -> list:
    with open(GROUPS_FILE) as f:
        return json.load(f)

def guardar_grupos(lst: list):
    with open(GROUPS_FILE, "w") as f:
        json.dump(lst, f, indent=2)

def registrar_grupo_si_es_nuevo(chat_id):
    if str(chat_id).startswith("-"):
        grupos = cargar_grupos()
        if chat_id not in grupos:
            grupos.append(chat_id)
            guardar_grupos(grupos)
            logging.info(f"Nuevo grupo registrado: {chat_id}")

# ── SCRAPING Y TEXTO ───────────────────────────────────────────────────────
def obtener_tasas() -> dict:
    tasas = {}
    try:
        raw = requests.get(URL, timeout=10).text
        txt = re.sub(r"<[^>]+>", " ", html.unescape(raw))
        txt = re.sub(r"\s+", " ", txt)
        for code, val in PATRON.findall(txt):
            tasas[code.lower()] = float(val.replace(",", "."))
    except Exception as e:
        logging.error("Scraping error: %s", e)
    tasas["updated_at"] = datetime.now().strftime("%Y-%m-%d %H:%M")
    with open("tasas.json", "w") as f:
        json.dump(tasas, f, indent=2)
    return tasas

def texto_tasas(t: dict) -> str:
    return (
        "💱 *TASA INFORMAL EN CUBA – elTOQUE*\n\n"
        f"💵 USD: `{t.get('usd','-')}` CUP\n"
        f"💶 EUR: `{t.get('eur','-')}` CUP\n"
        f"💳 MLC: `{t.get('mlc','-')}` CUP\n"
        f"🇨🇦 CAD: `{t.get('cad','-')}` CUP\n\n"
        f"📅 _Actualizado: {t['updated_at']}_"
    )

def teclado_priv() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.row(
        InlineKeyboardButton("📊 Ver tasas",  callback_data="ver"),
        InlineKeyboardButton("🔄 Actualizar", callback_data="upd")
    )
    return kb

def enviar_a_grupos(tasas):
    for gid in cargar_grupos():
        try:
            bot.send_message(gid, texto_tasas(tasas), parse_mode="Markdown")
        except Exception as e:
            logging.warning(f"No se pudo enviar a {gid}: {e}")

# ── COMANDOS ───────────────────────────────────────────────────────────────
@bot.message_handler(commands=["start", "tasa"])
def cmd_tasa(msg):
    registrar_grupo_si_es_nuevo(msg.chat.id)
    try:
        with open("tasas.json") as f:
            txt = texto_tasas(json.load(f))
        if msg.chat.type in ("group", "supergroup", "channel"):
            bot.reply_to(msg, txt)
        else:
            bot.reply_to(msg, txt, reply_markup=teclado_priv())
    except FileNotFoundError:
        bot.reply_to(msg, "⚠️ Tasas aún no disponibles, espera unos minutos.")

@bot.message_handler(commands=["update"])
def cmd_update(msg):
    if msg.from_user.id != ADMIN_ID:
        return bot.reply_to(msg, "🚫 Solo el administrador.")
    t = obtener_tasas()
    enviar_a_grupos(t)
    bot.reply_to(msg, "✅ Tasas actualizadas y enviadas.")

@bot.message_handler(commands=["addgroup"])
def add_group(msg):
    if msg.from_user.id != ADMIN_ID:
        return
    try: gid = int(msg.text.split()[1])
    except: return bot.reply_to(msg, "Uso: /addgroup -100id")
    grupos = cargar_grupos()
    if gid not in grupos:
        grupos.append(gid); guardar_grupos(grupos)
        bot.reply_to(msg, f"✅ Grupo {gid} añadido.")
    else:
        bot.reply_to(msg, "Ya estaba en la lista.")

@bot.message_handler(commands=["delgroup"])
def del_group(msg):
    if msg.from_user.id != ADMIN_ID:
        return
    try: gid = int(msg.text.split()[1])
    except: return bot.reply_to(msg, "Uso: /delgroup -100id")
    grupos = cargar_grupos()
    if gid in grupos:
        grupos.remove(gid); guardar_grupos(grupos)
        bot.reply_to(msg, f"🗑️ Grupo {gid} eliminado.")
    else:
        bot.reply_to(msg, "Ese grupo no estaba registrado.")

@bot.message_handler(commands=["listgroups"])
def list_groups(msg):
    if msg.from_user.id != ADMIN_ID:
        return
    grupos = cargar_grupos()
    if grupos:
        bot.reply_to(msg, "📄 *Grupos:* \n" + "\n".join([f"• `{g}`" for g in grupos]), parse_mode="Markdown")
    else:
        bot.reply_to(msg, "📄 Sin grupos configurados.")

@bot.message_handler(commands=["ayuda", "comandos"])
def help_msg(msg):
    bot.reply_to(
        msg,
        "📌 *Comandos*\n"
        "`/tasa` – Ver tasa actual (auto-registra el grupo)\n"
        "`/update` – (Admin) Actualiza y envía\n"
        "`/addgroup id` – (Admin) Agrega grupo\n"
        "`/delgroup id` – (Admin) Elimina grupo\n"
        "`/listgroups` – (Admin) Lista grupos\n"
        "`/ayuda` – Esta ayuda",
        parse_mode="Markdown"
    )

# ── CALLBACKS ──────────────────────────────────────────────────────────────
@bot.callback_query_handler(func=lambda c: True)
def cb(c):
    if c.data == "ver":
        with open("tasas.json") as f:
            bot.edit_message_text(
                texto_tasas(json.load(f)),
                chat_id=c.message.chat.id,
                message_id=c.message.message_id,
                reply_markup=teclado_priv()
            )
            bot.answer_callback_query(c.id)
    elif c.data == "upd":
        if c.from_user.id != ADMIN_ID:
            return bot.answer_callback_query(c.id, "⛔ Solo admin.")
        t = obtener_tasas(); enviar_a_grupos(t)
        bot.edit_message_text(
            texto_tasas(t),
            chat_id=c.message.chat.id,
            message_id=c.message.message_id,
            reply_markup=teclado_priv()
        )
        bot.answer_callback_query(c.id, "🔄 Actualizado")

# ── SCHEDULER ──────────────────────────────────────────────────────────────
def tarea():
    tasas = obtener_tasas(); enviar_a_grupos(tasas)

scheduler = BackgroundScheduler()
scheduler.add_job(tarea, "interval", minutes=INTERVALO_MINUTOS)
scheduler.start()
tarea()

# ── MAIN ──────────────────────────────────────────────────────────────────
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    print("🤖 BOT LISTO. Usa /tasa o espera la publicación automática.")
    bot.infinity_polling()
